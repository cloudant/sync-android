// ************ //
// CORE PROJ
// ************ //
dependencies {

    compile group: 'com.cloudant', name: 'cloudant-http', version:'2.11.0'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version:'2.1.1'
    compile group: 'commons-codec', name: 'commons-codec', version:'1.10'
    compile group: 'commons-io', name: 'commons-io', version:'2.4'
    
    testCompile group: 'org.hamcrest', name: 'hamcrest-all', version:'1.3'
    testCompile group: 'junit', name: 'junit', version:'4.11'
    testCompile group: 'org.mockito', name: 'mockito-all', version:'1.9.5'
    testCompile 'commons-validator:commons-validator:1.4.0'
    testCompile group: 'eu.rekawek.toxiproxy', name: 'toxiproxy-java', version: '2.1.1'

    // will probably test on java se, but it doesn't hurt to have android in too
    testCompile project(':cloudant-sync-datastore-javase')
    testCompile project(':cloudant-sync-datastore-android')

}

//
// Tests
//

task copyFixtures(type: Copy) {
    from '../fixture'
    into 'fixture'
}

tasks.withType(Test) {
    // pick up properties named test.* from command line, gradle.properties first
    System.properties.each { prop ->
                             if (prop.key.startsWith("test")) {
                                 systemProperty prop.key, prop.value
                             }
    }

    // the native dir is one directory up from the core project dir
    systemProperty "sqlite4java.library.path", "../native"
    systemProperty "file.encoding", "UTF-8"

    doFirst {
        // we need to copy fixtures to this sub-project
        copyFixtures.execute();
    }
}

test {
    useJUnit {
        excludeCategories \
        'com.cloudant.common.SystemTest', \
        'com.cloudant.common.RequireRunningCouchDB', \
        'com.cloudant.common.PerformanceTest', \
        'com.cloudant.common.RequireRunningProxy', \
        'com.cloudant.common.RequireCloudant'
    }
}

task integrationTest(type: Test, dependsOn: testClasses) {
    useJUnit {
        excludeCategories \
        'com.cloudant.common.SystemTest', \
        'com.cloudant.common.PerformanceTest', \
        'com.cloudant.common.RequireRunningProxy',  \
        'com.cloudant.common.RequireCloudant'
    }
}

task integrationTestCloudant(type: Test, dependsOn: testClasses) {
    useJUnit {
        excludeCategories \
        'com.cloudant.common.SystemTest', \
        'com.cloudant.common.PerformanceTest', \
        'com.cloudant.common.RequireRunningProxy'
    }
}


task performanceTest(type: Test, dependsOn: testClasses) {
    useJUnit {
        includeCategories
        'com.cloudant.common.PerformanceTest'
    }
}

task systemTest(type: Test, dependsOn: testClasses) {
    // Run all tests except unreliable network test (which requires a proxy)
    useJUnit {
        excludeCategories
        'com.cloudant.common.RequireRunningProxy'
    }
}

task unreliableNetworkTest(type: Test, dependsOn: testClasses) {
    systemProperty "test.with.specified.couch", true
    systemProperty "test.couch.port", 8000
    systemProperty "test.couch.proxy.admin.port", 8474
    systemProperty "test.couch.proxy.target.port", 5984
    // Disable keep-alive for these tests otherwise we eventually fill the pool with good
    // connections and the toxicity probabilities don't apply as we expect
    systemProperty "http.keepAlive", false
    // ensure proxy is running!
    filter {        
        includeTestsMatching "com.cloudant.sync.internal.replication.Unreliable*.*"
    }
}

task compileCrudSamples(type: JavaCompile, dependsOn: compileJava) {
    source = "../doc/CrudSamples.java"
    // add previously compiled library classes to classpath
    classpath = files(sourceSets.main.compileClasspath, sourceSets.main.output.classesDir)
    destinationDir = sourceSets.main.output.classesDir
}

//for Ant filter for "processResources" task
import org.apache.tools.ant.filters.ReplaceTokens
processResources {
    filter ReplaceTokens, tokens: [
        "version": project.version
    ]
}

uploadArchives {
    repositories {
        mavenDeployer {
            //augment the pom with additional information
            pom.project {
                name "cloudant-sync-datastore-core"
                description 'Cloudant Sync Datastore Core Package'
            }
        }
    }
}

//
// tools - these aren't part of the library but part of the build system etc
//

sourceSets {
  tools {
    java 
  }
}

compileToolsJava {
    // tools.jar needed for custom doclet
    classpath += files(org.gradle.internal.jvm.Jvm.current().toolsJar)
}

//
// Generate client.properties
//

//task for generating a client properties file
class ClientProperties extends DefaultTask {

    //allow this to be configured, default to com.cloudant.sync.client.properties
    File clientPropsPath = new File("com.cloudant.sync.client.properties")

    //internal
    private Properties p = new Properties()

    def load() {
        //if there is a generated file already load the values
        if (clientPropsPath.exists()) {
            p.load(new FileInputStream(clientPropsPath));
        }
    }


    @TaskAction
    def save() {
        p.put("user.agent.name", project.clientName)
        p.put("user.agent.version", project.version)
        p.store(new FileOutputStream(clientPropsPath), "User agent information for this client")
    }

    String getPropertyValue(String key) {
        return p.getProperty(key)
    }
}

//generate a client props file, make the jar task depend on this
task generateClientPropertiesFile(type: ClientProperties) {
    clientPropsPath = new File(buildDir, "tmp/com.cloudant.sync.client.properties")
    outputs.upToDateWhen {
        if (clientPropsPath.exists()) {
            it.load()
            return project.clientName.equals(it.getPropertyValue("user.agent.name")) && project.version.equals(it.getPropertyValue("user.agent.version"))
        } else {
            return false
        }
    }
}
jar.dependsOn generateClientPropertiesFile
//include the client props in the built jar
jar {
    into "META-INF", { from generateClientPropertiesFile.clientPropsPath }
}
