// ************ //
// CORE PROJ
// ************ //
dependencies {

    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version:'2.1.1'
    compile group: 'commons-codec', name: 'commons-codec', version:'1.10'
    compile group: 'com.google.guava', name: 'guava', version:'15.0'
    compile group: 'commons-io', name: 'commons-io', version:'2.4'
    
    testCompile group: 'org.hamcrest', name: 'hamcrest-all', version:'1.3'
    testCompile group: 'junit', name: 'junit', version:'4.11'
    testCompile group: 'org.mockito', name: 'mockito-all', version:'1.9.5'
    testCompile 'commons-validator:commons-validator:1.4.0'

    // will probably test on java se, but it doesn't hurt to have android in too
    testCompile project(':sync-javase')
    testCompile project(':sync-android')

}

//
// Tests
//

task copyFixtures(type: Copy) {
    from '../fixture'
    into 'fixture'
}

tasks.withType(Test) {
    // pick up properties named test.* from command line, gradle.properties first
    System.properties.each { prop ->
                             if (prop.key.startsWith("test")) {
                                 systemProperty prop.key, prop.value
                             }
    }

    // the native dir is one directory up from the core project dir
    systemProperty "sqlite4java.library.path", "../native"
    systemProperty "file.encoding", "UTF-8"

    doFirst {
        // we need to copy fixtures to this sub-project
        copyFixtures.execute();
    }
}

test {
    useJUnit {
        excludeCategories 'com.cloudant.common.SystemTest', 'com.cloudant.common.RequireRunningCouchDB', 'com.cloudant.common.PerformanceTest'
    }
}

task integrationTest(type: Test, dependsOn: testClasses) {
    useJUnit {
        excludeCategories 'com.cloudant.common.SystemTest', 'com.cloudant.common.PerformanceTest'
    }
}

task performanceTest(type: Test, dependsOn: testClasses) {
    useJUnit {
        includeCategories 'com.cloudant.common.PerformanceTest'
    }
}

task systemTest(type: Test, dependsOn: testClasses) {
    // Run all tests
}

//
// Publishing
//

publishing {
    publications {
        mavenJava(MavenPublication) {

            from components.java

            groupId 'com.cloudant'
            artifactId 'cloudant-sync-datastore-core'

            pom.withXml {
                Node rootNode = asNode()

                rootNode.appendNode('name', 'Cloudant Sync Datastore Android: core components')
                rootNode.appendNode('description', 'A JSON document datastore that syncs')
                rootNode.appendNode('url', 'https://cloudant.com/')
                rootNode.appendNode('packaging', 'jar')

                Node scmNode = rootNode.appendNode('scm')
                scmNode.appendNode('url', 'https://github.com/cloudant/sync-android')
                scmNode.appendNode('connection', 'https://github.com/cloudant/sync-android.git')

                Node licencesNode = rootNode.appendNode('licenses')
                Node licenceNode = licencesNode.appendNode('license')
                licenceNode.appendNode('name', 'The Apache Software License, Version 2.0')
                licenceNode.appendNode('url', 'http://www.apache.org/licenses/LICENSE-2.0.txt')
                licenceNode.appendNode('distribution', 'repo')
            }
        }
    }

    repositories {
        maven {
            url "$buildDir/repo"
        }
    }
}

//for Ant filter for "processResources" task
import org.apache.tools.ant.filters.ReplaceTokens
processResources {
    filter ReplaceTokens, tokens: [
        "version": project.version
    ]
}
