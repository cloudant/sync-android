apply plugin: 'com.android.application'

def scriptLocation = project.projectDir.getAbsolutePath(); //this is the location of THIS file
def testConfig = convertTestSysPropsToHash()

android {

    compileSdkVersion 22
    buildToolsVersion "23.0.2"

    lintOptions {
        abortOnError false
    }

    defaultConfig {
        applicationId "cloudant.com.androidtest"
        minSdkVersion 14
        targetSdkVersion 19
        versionCode 1
        versionName "1.0"
        //pass test config as key value pairs

        buildConfigField "String[][]", "TEST_CONFIG", testConfig
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {

        }
    }

    sourceSets {
        main {
            java.srcDirs = ['src/main/java',
                            "$scriptLocation/../../cloudant-sync-datastore-core/src/main/java",
                            "$scriptLocation/../../cloudant-sync-datastore-android/src/main/java",
                            "$scriptLocation/../../cloudant-sync-datastore-android-encryption/src/main/java"]
        }
        androidTest {
            java {
                srcDirs = ["$scriptLocation/../../cloudant-sync-datastore-core/src/test/java/",
                           "$scriptLocation/../../cloudant-sync-datastore-android/src/test/java/",
                           "$scriptLocation/../../cloudant-sync-datastore-android-encryption/src/test/java/"
                           ]
                // we would exclude these via categories but it doesn't like the android runner respects them
                exclude '**/Unreliable*Test*'
                // some of these tests fail as follows:
                // java.lang.OutOfMemoryError: Failed to allocate a
                // 8204 byte allocation with 4194304 free bytes and
                // 8MB until OOM; failed due to fragmentation
                // (required continguous free 12288 bytes where
                // largest contiguous free 8192 bytes)
                exclude '**/KeyManagerTests*'
            }
        }
    }

    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'

    }

    adbOptions {
        timeOutInMs 3*60*1000 // 3 minutes in ms.
    }

}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    // since our test harness is a standard android app which will run our tests,
    // we include the dependencies necessary for build and test here

    compile 'com.fasterxml.jackson.core:jackson-databind:2.1.1'
    compile 'com.google.guava:guava:15.0'
    compile 'commons-io:commons-io:2.4'
    compile 'commons-codec:commons-codec:1.9'
    compile 'org.apache.commons:commons-lang3:3.3.2'
    compile group: 'com.cloudant', name: 'cloudant-http', version:'2.7.0'
    compile 'com.google.code.findbugs:jsr305:3.0.0' //this is needed for some versions of android
    compile files('../../cloudant-sync-datastore-android-encryption/libs/sqlcipher.jar') //required sqlcipher lib
    compile files('../../cloudant-sync-datastore-android/libs/android-support-v4.jar')
    androidTestCompile group:'org.hamcrest', name:'hamcrest-library', version:'1.3'
    androidTestCompile group:'junit', name:'junit', version:'4.11'
    androidTestCompile group: 'org.mockito', name: 'mockito-core', version: '1.9.5'
    androidTestCompile group: 'com.google.dexmaker', name: 'dexmaker-mockito', version: '1.1'
    androidTestCompile group: 'com.google.dexmaker', name: 'dexmaker', version: '1.1'
    androidTestCompile group: 'commons-validator', name: 'commons-validator', version: '1.4.0'

    androidTestCompile('com.android.support.test:runner:0.2'){
        exclude group:'junit'
    }
    androidTestCompile('org.objenesis:objenesis:2.1') {
        // the current version of objenesis which mockito depends on is buggy on android, so force a newer version
        force true
    }
}

repositories {
    mavenLocal()
    mavenCentral()
}

task(uploadFixtures, type: AndroidExec) {
    // need to upload the fixtures to the device/emulator external storage
    // this will work irrespective of current working directory due to use of $scriptLocation

    commandLine "adb","push", "-p", "$scriptLocation/../../fixture/.", "/sdcard/fixture/"
}

task(clearDeviceLog, type: AndroidExec) {
    commandLine "adb","logcat", "-c"
}

task(pullDeviceLog, type: AndroidExec) {
    doFirst {
        standardOutput = new FileOutputStream(new File(reportsDir, "logcat.log"), false)
    }
    commandLine "adb","logcat", "-d", "-v", "threadtime"
}

tasks.withType(com.android.build.gradle.internal.tasks.AndroidTestTask) {
    dependsOn clearDeviceLog
    finalizedBy pullDeviceLog
}

def convertTestSysPropsToHash (){

    return "{" +
        System.properties
        .grep { prop -> prop.key.startsWith("test") }
        .collect(new ArrayList()) { prop -> "{\""+prop.key+"\",\""+ prop.value+"\"}"}
        .join(",") +
        "}"

}

